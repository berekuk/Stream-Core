package Stream;

# ABSTRACT: stream-processing framework

=head1 SYNOPSIS

    use Streams;
    process
        catalog->in('links') | filter(sub { "Link: ".shift() })
        => processor(sub { print shift()."\n" })
    ;

=head1 DESCRIPTION

B<Stream> framework should make it easy to write stream-processing scripts, which will be input and output-agnostic.

Common terms:

=over

=item I<Input stream>

Input stream is an object in memory providing iterator-like API - C<read> and C<read_chunk> methods.

You can construct input stream if you know storage and cursor.

Implementations: L<Stream::File::In>, L<Stream::DB::In>.

=item I<Output stream>

Output stream is an object in memory providing writing API - C<write> and C<write_chunk> methods.

Implementations: L<Stream::File::In>, L<Stream::DB::In>.

=item I<Filter>

Filter is an object that modify data from some stream.

Filters can be attached to input or output streams using C<|> operator.

See L<Stream::Filter> for details.

=item I<Storage>

Storage is a kind of output stream which can generate input streams by cursor.

See L<Stream::Storage> for abstract base class and API.

Implementations: L<Stream::File>, L<Stream::Log>, L<Stream::DB>.

=item I<Cursor>

Persistent object which contains position of input stream, usually associated with some storage.

If you know cursor, you usually don't have to explicitly construct storage, its coordinates on disk (or in DB, or anywhere else) will be restored from cursor contents.

Implementations: L<Stream::File::Cursor>, L<Stream::DB::Cursor>.

=back

=head1 CONFIGURATION AND ENVIRONMENT

L<Stream::Catalog> allows to reference to any storage, cursor and stream by its name in catalog.

=head1 SEE ALSO

L<http://search.cpan.org/~mstrout/IO-Pipeline/> - unix pipe style expressions from Matt S Trout.

L<http://search.cpan.org/~nuffin/Data-Stream-Bulk/> - N at a time iteration API, similar to C<read_chunk()> in Streams 

=cut
