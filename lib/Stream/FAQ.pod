=head1 NAME

Stream::FAQ - some recipes for people who are still afraid of streams.

=head1 FAQ

=head2 What are streams, anyway?

There are two basic kinds of streams: input streams, inerhited from L<Stream::In>, and output streams, inherited from L<Stream::Out>.

You can read from input streams and write to output streams, manually or using some helper functions.

You can register streams in catalog and address them by name later from any script. You can pipeline streams into chains using filters, separate them and rewrite them into reusable components and monitor their processing globally.

=head2 I just want to use Unrotate-like API! (or: what is a simplest way to migrate?)

The simplest way to migrate your Unrotate code on C<Stream> framework is to replace C<Yandex::Unrotate> with C<Stream::Log::In>.

It works as a proxy to C<Yandex::Unrotate> and provides following methods: C<readline>, C<show_lag>, C<position>, C<commit>.

(Although it's better to rename C<show_lag> into C<lag> and C<readline> into C<read>, but you can do all this later).

=head2 How can I reference my streams using short names?

You should register them in catalog.

This can be accomplished by creating small files in /etc/stream/in, /etc/stream/out and /etc/stream/cursor, which contains calls to constructors of input and output streams, and stream cursors, respectively.

For example:

 # /etc/stream/out/bulca-ds.links
 use Stream::Log;
 Stream::Log->new("/var/spool/yandex-ppb-bulca-ds/links.log");

 # /etc/stream/cursor/links2db
 use Stream::Log::Cursor;
 use Streams;
 Stream::Log::Cursor->new({PosFile => "/var/lib/yandex-ppb-process-links/links.pos", LogFile => storage("bulca-ds.links")->file});

After that, you can construct stream like this:

 use Streams;
 my $in = catalog->in("links2db"); # catalog->in($cursor_name) is a shortcut to catalog->cursor($cursor_name)->stream().

=head2 How do I rewrite my stream processor to be stream-agnostic?

First, you should rewrite your code to be an actual stream processor.

Your current code probably looks like this:

    my $reader = Yandex::Unrotate->new(...);
    while (my $line = $reader->readline) {
        ... # processing $line
    }

It mixes reading actions and processing actions into one piece of code, which means you can't process data from any other source, or simply construct reader and process it differently.

With streams, you should rewrite your processing part like this:

    package PPB::Something;
    use base qw(Stream::Out);
    sub write {
        my ($self, $line) = @_;
        ... # processing $line
    }

After that, to launch processing, you can choose one of two options:

1) simply leave all code in script and call processing conditionally:

    ...
    unless (caller) {
        process(
            Stream::Log::In->new(...) # stream equivalent of Yandex::Unrotate
            => __PACKAGE__->new
        );
    }

2) put all processing code into module and write a simple wrapper script:

    use PPB::Something;
    use Streams;
    process(
        Stream::Log::In->new(...) # stream equivalent of Yandex::Unrotate
        => PPB::Something->new
    );

In latter case, you can register these input/output streams in catalog and be able to obtain them from any other script or one-liner.

=head2 How can I benefit from my new shiny stream-agnostic code?

You can write tests! It'll be mostly easy if your code is a filter (that means it inherits from Stream::Filter and generates another "stream" of data as it works).

In this case, your test can contain something like this:

    use PPB::Something;
    $filter = PPB::Something->new;
    is($filter->write("incoming data"), "expected result");

More you can refactor your code into several separated filters, more deeply you can test them.

For example, if your program is a comment-fetching robot, it can be presented as C<comment_fetcher() | comment_parser() | culca_writer()>.

If you want to test your script as a whole, you can also consider C<bind_in> method of C<Stream::Catalog> as a way to override input stream by name.

=head1 AUTHOR

Vyacheslav Matjukhin <mmcleric@yandex-team.ru>

=head1 LICENCE AND COPYRIGHT

Copyright (c) 2009-2010 Yandex LTD. All rights reserved.

=cut
